/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * VariantExplain API
 * API for VariantExplain application
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export interface AnalysisResponse {
  message: string;
}

export interface BodyUploadFileUploadFilePost {
  file: Blob;
}

export interface FileUploadResponse {
  filename: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface HealthResponse {
  status: string;
}

export type StatusPollResponseStatus = typeof StatusPollResponseStatus[keyof typeof StatusPollResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StatusPollResponseStatus = {
  idle: 'idle',
  starting: 'starting',
  vep_annotation: 'vep_annotation',
  find_damaging_variants: 'find_damaging_variants',
  fetch_gwas_associations: 'fetch_gwas_associations',
  fetch_pubmed_abstracts: 'fetch_pubmed_abstracts',
  summarise_traits: 'summarise_traits',
  completed: 'completed',
  error: 'error',
} as const;

export type StatusPollResponseProgress = number | null;

export type StatusPollResponseStep = string | null;

export type StatusPollResponseCurrent = number | null;

export type StatusPollResponseTotal = number | null;

export type StatusPollResponseMessage = string | null;

export interface StatusPollResponse {
  status: StatusPollResponseStatus;
  progress?: StatusPollResponseProgress;
  step?: StatusPollResponseStep;
  current?: StatusPollResponseCurrent;
  total?: StatusPollResponseTotal;
  message?: StatusPollResponseMessage;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type RootGet200 = {[key: string]: string};

/**
 * Root endpoint that returns a welcome message.
 * @summary Root
 */
export const rootGet = <TData = AxiosResponse<RootGet200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8000/`,options
    );
  }

/**
 * @summary Upload File
 */
export const uploadFileUploadFilePost = <TData = AxiosResponse<FileUploadResponse>>(
    bodyUploadFileUploadFilePost: BodyUploadFileUploadFilePost, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
formData.append(`file`, bodyUploadFileUploadFilePost.file)

    return axios.post(
      `http://localhost:8000/upload_file`,
      formData,options
    );
  }

/**
 * @summary Analysis
 */
export const analysisAnalysisGet = <TData = AxiosResponse<AnalysisResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8000/analysis`,options
    );
  }

/**
 * Polling endpoint for status updates.
 * @summary Status Poll
 */
export const statusPollStatusPollGet = <TData = AxiosResponse<StatusPollResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8000/status_poll`,options
    );
  }

/**
 * Health check endpoint for monitoring.
 * @summary Health Check
 */
export const healthCheckHealthGet = <TData = AxiosResponse<HealthResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8000/health`,options
    );
  }

export type RootGetResult = AxiosResponse<RootGet200>
export type UploadFileUploadFilePostResult = AxiosResponse<FileUploadResponse>
export type AnalysisAnalysisGetResult = AxiosResponse<AnalysisResponse>
export type StatusPollStatusPollGetResult = AxiosResponse<StatusPollResponse>
export type HealthCheckHealthGetResult = AxiosResponse<HealthResponse>
